/**
 cuprum 0.1.17
 @copyright 2023 Edwin Martin <edwin@bitstorm.org>
 @license MIT
 */
class s{constructor(){this.subscribers=new Set,this.subscribersHot=new Set,this.dispatched=!1,this.hot=!1,this.isSubject=!1}dispatch(s){if(this.isSubject)throw new Error("Can't dispatch on subject");return this.internalDispatch(s),this}subscribe(s){return this.dispatched&&s(this.val),this.subscribeNext(s)}unsubscribe(s){this.subscribers.delete(s),this.notifyHotSubscribers()}subscribeHot(s){return this.subscribersHot.add(s),{unsubscribe:()=>{this.subscribersHot.delete(s)}}}clear(){this.subscribers.clear(),this.subscribersHot.clear()}value(){return this.val}observable(){const s=this.map((s=>s));return s.isSubject=!0,s}promise(){return new Promise((s=>{const t=this.subscribe((function(e){t.unsubscribe(),s(e)}))}))}map(t){const e=new s,i=s=>{e.internalDispatch(t(s))};return e.subscribeHot((s=>{s?this.subscribe(i):this.unsubscribe(i)})),e}filter(t){const e=new s,i=s=>{t(s)&&e.dispatch(s)};return e.subscribeHot((s=>{s?this.subscribe(i):this.unsubscribe(i)})),e}notifyHotSubscribers(){this.subscribers.size>0!=this.hot&&(this.hot=this.subscribers.size>0,this.subscribersHot.forEach((s=>s(this.hot))))}subscribeNext(s){return this.subscribers.add(s),this.notifyHotSubscribers(),{unsubscribe:()=>{this.subscribers.delete(s)}}}internalDispatch(s){const t=this.val;this.val=s,this.dispatched=!0,this.subscribers.forEach((e=>e(s,t)))}}function t(s,t,i){return e(s,t,i)}function e(t,e,i){const r=new s,b=s=>{r.dispatch(s)};return r.subscribeHot((s=>{s?t.addEventListener(e,b,i):t.removeEventListener(e,b,i)})),r}function i(...t){const e=new s,i=new Set;return e.subscribeHot((s=>{s?t.forEach((s=>{i.add(s.subscribe((()=>{e.dispatch(t.map((s=>s.value())))})))})):i.forEach((s=>s.unsubscribe()))})),e}function r(...t){const e=new s,i=new Set;return e.subscribeHot((s=>{s?t.forEach((s=>{i.add(s.subscribe((s=>{e.dispatch(s)})))})):i.forEach((s=>s.unsubscribe()))})),e}function b(t){const e=new s;let i,r=null;return e.subscribeHot((s=>{s?(i=0,r=setInterval((()=>{e.dispatch(i++)}),t)):clearInterval(r)})),e}export{s as Cuprum,i as combine,e as fromCustomEvent,t as fromEvent,b as interval,r as merge};
//# sourceMappingURL=bundle.min.js.map
