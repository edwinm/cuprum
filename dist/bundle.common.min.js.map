{"version":3,"file":"bundle.common.min.js","sources":["../src/cuprum.ts"],"sourcesContent":["/**\n cuprum __buildVersion__\n @copyright 2020 Edwin Martin <edwin@bitstorm.org>\n @license MIT\n */\nexport class Cuprum<T> {\n  private val: T;\n  private subscribers: Set<(value: T, oldValue?: T) => void> = new Set();\n  private subscribersHot: Set<(value: boolean) => void> = new Set();\n  private dispatched = false;\n  private hot = false;\n  private isSubject = false;\n\n  dispatch(value: T): Cuprum<T> {\n    if (this.isSubject) {\n      throw new Error(\"Can't dispatch on subject\");\n    }\n    this.internalDispatch(value);\n    return this;\n  }\n\n  subscribe(fn: (value: T, oldValue?: T) => void): Subscription {\n    if (this.dispatched) {\n      fn(this.val);\n    }\n    return this.subscribeNext(fn);\n  }\n\n  unsubscribe(fn: (value: T, oldValue?: T) => void): void {\n    this.subscribers.delete(fn);\n    this.notifyHotSubscribers();\n  }\n\n  subscribeHot(fn: (value: boolean) => void): Subscription {\n    this.subscribersHot.add(fn);\n    return {\n      unsubscribe: (): void => {\n        this.subscribersHot.delete(fn);\n      },\n    };\n  }\n\n  clear(): void {\n    this.subscribers.clear();\n    this.subscribersHot.clear();\n  }\n\n  value(): T {\n    return this.val;\n  }\n\n  observable(): Observable<T> {\n    const observable = this.map((value) => value);\n    observable.isSubject = true;\n    return observable;\n  }\n\n  promise(): Promise<T> {\n    return new Promise<T>((resolve) => {\n      const sub = this.subscribe(function fn(value) {\n        sub.unsubscribe();\n        resolve(value);\n      });\n    });\n  }\n\n  // TODO: async map\n\n  map<U>(fn: (val: T) => U): Cuprum<U> {\n    const event$ = new Cuprum<U>();\n    const dispatch = (value) => {\n      event$.internalDispatch(fn(value));\n    };\n    event$.subscribeHot((hot) => {\n      if (hot) {\n        this.subscribe(dispatch);\n      } else {\n        this.unsubscribe(dispatch);\n      }\n    });\n    return event$;\n  }\n\n  filter(fn: (val: T) => boolean): Cuprum<T> {\n    const event$ = new Cuprum<T>();\n    const dispatch = (value) => {\n      if (fn(value)) {\n        event$.dispatch(value);\n      }\n    };\n    event$.subscribeHot((hot) => {\n      if (hot) {\n        this.subscribe(dispatch);\n      } else {\n        this.unsubscribe(dispatch);\n      }\n    });\n    return event$;\n  }\n\n  private notifyHotSubscribers() {\n    if (this.subscribers.size > 0 != this.hot) {\n      this.hot = this.subscribers.size > 0;\n      this.subscribersHot.forEach((fn) => fn(this.hot));\n    }\n  }\n\n  private subscribeNext(fn: (value: T) => void): Subscription {\n    this.subscribers.add(fn);\n    this.notifyHotSubscribers();\n    return {\n      unsubscribe: (): void => {\n        this.subscribers.delete(fn);\n      },\n    };\n  }\n\n  private internalDispatch(value: T) {\n    const oldValue = this.val;\n    this.val = value;\n    this.dispatched = true;\n    this.subscribers.forEach((fn) => fn(value, oldValue));\n  }\n}\n\nexport function fromEvent<K extends keyof WindowEventMap>(\n  element: Window,\n  eventType: K,\n  options?: boolean | AddEventListenerOptions\n): Cuprum<WindowEventMap[K]>;\n\nexport function fromEvent<K extends keyof DocumentEventMap>(\n  element: Document,\n  eventType: K,\n  options?: boolean | AddEventListenerOptions\n): Cuprum<DocumentEventMap[K]>;\n\nexport function fromEvent<K extends keyof HTMLElementEventMap>(\n  element: HTMLElement,\n  eventType: K,\n  options?: boolean | AddEventListenerOptions\n): Cuprum<HTMLElementEventMap[K]>;\n\nexport function fromEvent(\n  element: HTMLElement | Document | Window,\n  eventType: string,\n  options?: boolean | AddEventListenerOptions\n) {\n  return fromCustomEvent(element, eventType, options);\n}\n\nexport function fromCustomEvent(\n  element: HTMLElement | Document | Window,\n  eventType: string,\n  options?: boolean | AddEventListenerOptions\n) {\n  const obs$ = new Cuprum();\n  const dispatch = (evt: unknown) => {\n    obs$.dispatch(evt);\n  };\n  obs$.subscribeHot((hot) => {\n    if (hot) {\n      element.addEventListener(eventType, dispatch, options);\n    } else {\n      element.removeEventListener(eventType, dispatch, options);\n    }\n  });\n  return obs$;\n}\n\nexport function combine<T>(obs1$: Observable<T>): Observable<[T]>;\nexport function combine<T, U>(\n  obs1$: Observable<T>,\n  obs2$: Observable<U>\n): Observable<[T, U]>;\nexport function combine<T, U, V>(\n  obs1$: Observable<T>,\n  obs2$: Observable<U>,\n  obs3$: Observable<V>\n): Observable<[T, U, V]>;\nexport function combine<T, U, V, W>(\n  obs1$: Observable<T>,\n  obs2$: Observable<U>,\n  obs3$: Observable<V>,\n  obs4$: Observable<W>\n): Observable<[T, U, V, W]>;\nexport function combine<T, U, V, W, X>(\n  obs1$: Observable<T>,\n  obs2$: Observable<U>,\n  obs3$: Observable<V>,\n  obs4$: Observable<W>,\n  obs5$: Observable<X>\n): Observable<[T, U, V, W, X]>;\nexport function combine<T, U, V, W, X, Y>(\n  obs1$: Observable<T>,\n  obs2$: Observable<U>,\n  obs3$: Observable<V>,\n  obs4$: Observable<W>,\n  obs5$: Observable<X>,\n  obs6$: Observable<Y>\n): Observable<[T, U, V, W, X, Y]>;\nexport function combine<T, U, V, W, X, Y, Z>(\n  obs1$: Observable<T>,\n  obs2$: Observable<U>,\n  obs3$: Observable<V>,\n  obs4$: Observable<W>,\n  obs5$: Observable<X>,\n  obs6$: Observable<Y>,\n  obs7$: Observable<Z>\n): Observable<[T, U, V, W, X, Y, Z]>;\n\nexport function combine(\n  ...cuprumList: Observable<unknown>[]\n): Observable<unknown> {\n  const obs$ = new Cuprum();\n  const subs = new Set<Subscription>();\n\n  obs$.subscribeHot((hot) => {\n    if (hot) {\n      cuprumList.forEach((obs) => {\n        subs.add(\n          obs.subscribe(() => {\n            obs$.dispatch(cuprumList.map((obs1) => obs1.value()));\n          })\n        );\n      });\n    } else {\n      subs.forEach((sub) => sub.unsubscribe());\n    }\n  });\n\n  return <Observable<unknown>>obs$;\n}\n\nexport function merge<T>(...cuprumList: Observable<T>[]): Observable<T> {\n  const obs$ = new Cuprum();\n  const subs = new Set<Subscription>();\n\n  obs$.subscribeHot((hot) => {\n    if (hot) {\n      cuprumList.forEach((obs) => {\n        subs.add(\n          obs.subscribe((value) => {\n            obs$.dispatch(value);\n          })\n        );\n      });\n    } else {\n      subs.forEach((sub) => sub.unsubscribe());\n    }\n  });\n\n  return <Observable<T>>obs$;\n}\n\nexport function interval(msec: number): Cuprum<unknown> {\n  const obs$ = new Cuprum();\n  let timer = <NodeJS.Timeout>null;\n  let counter;\n\n  obs$.subscribeHot((hot) => {\n    if (hot) {\n      counter = 0;\n      timer = setInterval(() => {\n        obs$.dispatch(counter++);\n      }, msec);\n    } else {\n      clearInterval(timer);\n    }\n  });\n\n  return obs$;\n}\n\nexport type Observable<T> = Omit<Cuprum<T>, \"dispatch\">;\n\nexport interface Subscription {\n  unsubscribe: () => void;\n}\n"],"names":["Cuprum","[object Object]","this","Set","value","isSubject","Error","internalDispatch","fn","dispatched","val","subscribeNext","subscribers","delete","notifyHotSubscribers","subscribersHot","add","unsubscribe","clear","observable","map","Promise","resolve","sub","subscribe","event$","dispatch","subscribeHot","hot","size","forEach","oldValue","fromCustomEvent","element","eventType","options","obs$","evt","addEventListener","removeEventListener","cuprumList","subs","obs","obs1","msec","counter","timer","setInterval","clearInterval"],"mappings":"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"}